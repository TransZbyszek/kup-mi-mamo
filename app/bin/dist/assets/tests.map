{"version":3,"sources":["test-app/tests/adapters/application.jshint.js","test-app/tests/app.jshint.js","test-app/tests/controllers/new.jshint.js","test-app/tests/helpers/create-offline-ref.js","test-app/tests/helpers/destroy-app.js","test-app/tests/helpers/destroy-app.jshint.js","test-app/tests/helpers/module-for-acceptance.js","test-app/tests/helpers/module-for-acceptance.jshint.js","test-app/tests/helpers/replace-app-ref.js","test-app/tests/helpers/resolver.js","test-app/tests/helpers/resolver.jshint.js","test-app/tests/helpers/start-app.js","test-app/tests/helpers/start-app.jshint.js","test-app/tests/helpers/stub-firebase.js","test-app/tests/helpers/unstub-firebase.js","test-app/tests/models/vehicle.jshint.js","test-app/tests/resolver.jshint.js","test-app/tests/router.jshint.js","test-app/tests/routes/application.jshint.js","test-app/tests/routes/list.jshint.js","test-app/tests/routes/new.jshint.js","test-app/tests/test-helper.js","test-app/tests/test-helper.jshint.js","test-app/tests/unit/controllers/vehicle-test.js","test-app/tests/unit/controllers/vehicle-test.jshint.js","test-app/tests/unit/helpers/show-message-test.js","test-app/tests/unit/helpers/show-message-test.jshint.js","test-app/tests/unit/models/vehicle-test.js","test-app/tests/unit/models/vehicle-test.jshint.js","test-app/tests/unit/routes/application-test.js","test-app/tests/unit/routes/application-test.jshint.js","test-app/tests/unit/routes/list-test.js","test-app/tests/unit/routes/list-test.jshint.js","test-app/tests/unit/routes/new-test.js","test-app/tests/unit/routes/new-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('test-app/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('test-app/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('test-app/tests/controllers/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/new.js should pass jshint.');\n  });\n});","define('test-app/tests/helpers/create-offline-ref', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = createOfflineRef;\n\n  /**\n   * Creates an offline Firebase reference with optional initial data and url.\n   *\n   * Be sure to `stubFirebase()` and `unstubFirebase()` in your tests!\n   *\n   * @param  {Object} [initialData]\n   * @param  {String} [url]\n   * @return {Firebase}\n   */\n\n  function createOfflineRef(initialData) {\n    var url = arguments.length <= 1 || arguments[1] === undefined ? 'https://emberfire-tests.firebaseio.com' : arguments[1];\n\n    if (!_firebase['default']._unStub) {\n      throw new Error('Please use stubFirebase() before calling this method');\n    }\n\n    var ref = new _firebase['default'](url);\n    _firebase['default'].goOffline(); // must be called after the ref is created\n\n    if (initialData) {\n      ref.set(initialData);\n    }\n\n    return ref;\n  }\n});","define('test-app/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('test-app/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('test-app/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'test-app/tests/helpers/start-app', 'test-app/tests/helpers/destroy-app'], function (exports, _qunit, _testAppTestsHelpersStartApp, _testAppTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _testAppTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _testAppTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('test-app/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('test-app/tests/helpers/replace-app-ref', ['exports'], function (exports) {\n  exports['default'] = replaceAppRef;\n  /**\n   * Updates the supplied app adapter's Firebase reference.\n   *\n   * @param  {Ember.Application} app\n   * @param  {Firebase} ref\n   * @param  {String} [model]  The model, if overriding a model specific adapter\n   */\n\n  function replaceAppRef(app, ref) {\n    var model = arguments.length <= 2 || arguments[2] === undefined ? 'application' : arguments[2];\n\n    var store = app.__container__.lookup('service:store');\n    var adapter = store.adapterFor(model);\n\n    adapter._ref = ref;\n    adapter._queueFlushDelay = false;\n  }\n});","define('test-app/tests/helpers/resolver', ['exports', 'test-app/resolver', 'test-app/config/environment'], function (exports, _testAppResolver, _testAppConfigEnvironment) {\n\n  var resolver = _testAppResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _testAppConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _testAppConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('test-app/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('test-app/tests/helpers/start-app', ['exports', 'ember', 'test-app/app', 'test-app/config/environment'], function (exports, _ember, _testAppApp, _testAppConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _testAppConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _testAppApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('test-app/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('test-app/tests/helpers/stub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = stubFirebase;\n\n  /**\n   * When a reference is in offline mode it will not call any callbacks\n   * until it goes online and resyncs. The ref will have already\n   * updated its internal cache with the changed values so we shortcut\n   * the process and call the supplied callbacks immediately (asynchronously).\n   */\n\n  function stubFirebase() {\n\n    // check for existing stubbing\n    if (!_firebase['default']._unStub) {\n\n      var originalSet = _firebase['default'].prototype.set;\n      var originalUpdate = _firebase['default'].prototype.update;\n      var originalRemove = _firebase['default'].prototype.remove;\n\n      _firebase['default']._unStub = function () {\n        _firebase['default'].prototype.set = originalSet;\n        _firebase['default'].prototype.update = originalUpdate;\n        _firebase['default'].prototype.remove = originalRemove;\n      };\n\n      _firebase['default'].prototype.set = function (data, cb) {\n        originalSet.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].prototype.update = function (data, cb) {\n        originalUpdate.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].prototype.remove = function (cb) {\n        originalRemove.call(this);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n    }\n  }\n});","define('test-app/tests/helpers/unstub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = unstubFirebase;\n\n  function unstubFirebase() {\n    if (typeof _firebase['default']._unStub === 'function') {\n      _firebase['default']._unStub();\n      delete _firebase['default']._unStub;\n    }\n  }\n});","define('test-app/tests/models/vehicle.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/vehicle.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/vehicle.js should pass jshint.');\n  });\n});","define('test-app/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('test-app/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('test-app/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('test-app/tests/routes/list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/list.js should pass jshint.');\n  });\n});","define('test-app/tests/routes/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/new.js should pass jshint.\\nroutes/new.js: line 5, col 36, \\'transition\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('test-app/tests/test-helper', ['exports', 'test-app/tests/helpers/resolver', 'ember-qunit'], function (exports, _testAppTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_testAppTestsHelpersResolver['default']);\n});","define('test-app/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('test-app/tests/unit/controllers/vehicle-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:vehicle', 'Unit | Controller | vehicle', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('test-app/tests/unit/controllers/vehicle-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/vehicle-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/vehicle-test.js should pass jshint.');\n  });\n});","define('test-app/tests/unit/helpers/show-message-test', ['exports', 'test-app/helpers/show-message', 'qunit'], function (exports, _testAppHelpersShowMessage, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | show message');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _testAppHelpersShowMessage.showMessage)([42]);\n    assert.ok(result);\n  });\n});","define('test-app/tests/unit/helpers/show-message-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/show-message-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/show-message-test.js should pass jshint.');\n  });\n});","define('test-app/tests/unit/models/vehicle-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('vehicle', 'Unit | Model | vehicle', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('test-app/tests/unit/models/vehicle-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/vehicle-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/vehicle-test.js should pass jshint.');\n  });\n});","define('test-app/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('test-app/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('test-app/tests/unit/routes/list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:list', 'Unit | Route | list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('test-app/tests/unit/routes/list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/list-test.js should pass jshint.');\n  });\n});","define('test-app/tests/unit/routes/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:new', 'Unit | Route | new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('test-app/tests/unit/routes/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('test-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}